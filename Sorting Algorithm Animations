import random
import time
import matplotlib.pyplot as plt
import matplotlib.animation as animation

#function swaps number
def swap(RandNum, i, j):
    if i != j:
        RandNum[i], RandNum[j] = RandNum[j], RandNum[i]
                                                     
def bubblesort(RandNum):
    if len(RandNum) == 1:
        return
    swapped = True
    for i in range(len(RandNum) - 1):
        if not swapped:
            break
        swapped = False
        for j in range(len(RandNum) - 1 - i):
            if RandNum[j] > RandNum[j + 1]:
                swap(RandNum, j, j + 1)
                swapped = True
            yield RandNum

def insertionsort(RandNum):
    for i in range(1, len(RandNum)):
        j = i
        while j > 0 and RandNum[j] < RandNum[j - 1]:
            swap(RandNum, j, j - 1)
            j -= 1
            yield RandNum

def mergesort(RandNum, start, end):
    if end <= start:
        return

    mid = start + ((end - start + 1) // 2) - 1
    yield from mergesort(RandNum, start, mid)
    yield from mergesort(RandNum, mid + 1, end)
    yield from merge(RandNum, start, mid, end)
    yield RandNum

def merge(RandNum, start, mid, end):
    merged = []
    leftIdx = start
    rightIdx = mid + 1

    while leftIdx <= mid and rightIdx <= end:
        if RandNum[leftIdx] < RandNum[rightIdx]:
            merged.append(RandNum[leftIdx])
            leftIdx += 1
        else:
            merged.append(RandNum[rightIdx])
            rightIdx += 1

    while leftIdx <= mid:
        merged.append(RandNum[leftIdx])
        leftIdx += 1

    while rightIdx <= end:
        merged.append(RandNum[rightIdx])
        rightIdx += 1

    for i, sorted_val in enumerate(merged):
        RandNum[start + i] = sorted_val
        yield RandNum

def quicksort(RandNum, start, end):
    if start >= end:
        return

    pivot = RandNum[end]
    pivotIdx = start

    for i in range(start, end):
        if RandNum[i] < pivot:
            swap(RandNum, i, pivotIdx)
            pivotIdx += 1
        yield RandNum
    swap(RandNum, end, pivotIdx)
    yield RandNum

    yield from quicksort(RandNum, start, pivotIdx - 1)
    yield from quicksort(RandNum, pivotIdx + 1, end)

def selectionsort(RandNum):
    if len(RandNum) == 1:
        return

    for i in range(len(RandNum)):
        # Find minimum unsorted value.
        minVal = RandNum[i]
        minIdx = i
        for j in range(i, len(RandNum)):
            if RandNum[j] < minVal:
                minVal = RandNum[j]
                minIdx = j
            yield RandNum
        swap(RandNum, i, minIdx)
        yield RandNum

def update_fig(RandNum, rects, iteration):
    for rect, val in zip(rects, RandNum):
        rect.set_height(val)
    iteration[0] += 1
    text.set_text("# of operations: {}".format(iteration[0]))
        
#ask user how many intergers they want to sort
num = (input("How many numbers would you like to use?"))
num = int(num)

#Generate Random Numbers in chart
RandNum = [x + 1 for x in range(num)]
random.seed(time.time())
random.shuffle(RandNum)

#sort method used
sortMethod = input("What sort method would you like to animate" '\n'
                  "Choose between the listed algorithms:" '\n'
                   'Bubble, Selection')

#Generate Correct Animation
if sortMethod == "Bubble":
    generator = bubblesort(RandNum)
    
if sortMethod == "Insertion":
    generator = insertionsort(RandNum)

#initialize graph
fig, ax = plt.subplots()
ax.set_title(sortMethod + "Sort Plot")
bar_rects = ax.bar(range(len(RandNum)), RandNum, align="edge")

# Set axis limits. Set y axis upper limit high enough that the tops of
# the bars won't overlap with the text label.
ax.set_xlim(0, num)
ax.set_ylim(0, int(1.07 * num))

# Place a text label in the upper-left corner of the plot to display
# number of operations performed by the sorting algorithm (each "yield"
# is treated as 1 operation).
text = ax.text(0.02, 0.95, "", transform=ax.transAxes)

iteration = [0]
anim = animation.FuncAnimation(fig, func=update_fig,
        fargs=(bar_rects, iteration), frames=generator, interval=1,
        repeat=False)
plt.show()
